(* This is a comment *)

(* A generic identity function *)
let id : forall (C : Type) C -> C
  , id A x = x.

(* Boolean *)
let Bool : Type
  , Bool = { true | false }.

(* Eliminator for booleans *)
let elimBool : forall (C : Type -> Bool) C true -> C false
    -> forall (b : Bool) C b
  , elimBool F f0 f1 = ( true  -> f0
                       | false -> f1
                       ).

(* Natural numbers as recursive types *)
letrc Nat : Type
    , Nat = { zero | succ Nat }.
